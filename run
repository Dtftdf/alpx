#!/usr/bin/env bash
set -euo pipefail

###======================= USER VARS (EDIT ME) ================================
DISK="/dev/sda"                # e.g. /dev/nvme0n1
HOSTNAME="alpine"
TIMEZONE="UTC"                 # e.g. America/New_York
KEYMAP="us"                    # console keymap
LOCALE="en_US.UTF-8"           # Alpine busybox locale target
ROOT_PASSWORD="*******"      # root password
NEW_USER="dev"              # set empty "" to skip user creation
NEW_USER_PASSWORD="changeMe!"  # password for NEW_USER
NEW_USER_SUDO="yes"            # yes/no -> wheel/sudo

# Networking: one simple DHCP interface (change if needed)
NET_IFACE="eth0"               # e.g. eth0, enp1s0
USE_DHCP="no"                 # yes|no
STATIC_IP="192.168.88.227/24"                   # "192.0.2.10/24"
STATIC_GW="192.168.88.1"                   # "192.0.2.1"
STATIC_DNS="192.168.88.1"

# APK mirror (fast one near you)
APK_REPO="https://dl-cdn.alpinelinux.org/alpine/latest-stable/main"
APK_REPO_COMMUNITY="https://dl-cdn.alpinelinux.org/alpine/latest-stable/community"

# Sizes
EFI_SIZE="1GiB"
BOOT_SIZE="1GiB"
LV_ROOT_SIZE="50G"
LV_HOME_SIZE="25G"
LV_VAR_SIZE="25G"
LV_TMP_SIZE="10G"
LV_VAR_TMP_SIZE="10G"     
# Filesystem type
FS_BOOT="ext4"
FS_DATA="ext4"

# SSH
ENABLE_SSH="no"               # yes|no
PERMIT_ROOT_SSH="no"           # yes|no
AUTHORIZED_KEY=""              # paste an SSH public key to enable key auth for root and NEW_USER

###===================== DERIVED / CONSTANTS =================================
P1="${DISK}1"   # EFI
P2="${DISK}2"   # /boot
P3="${DISK}3"   # LUKS PV -> LVM
MNT="/mnt"
VG="vg"
MAP="luks_main"

TMP_OPTS="defaults,nodev,nosuid,noexec"
VAR_TMP_OPTS="defaults,nodev,nosuid,noexec"
VAR_OPTS="defaults,nodev,nosuid"
HOME_OPTS="defaults,nodev,nosuid"
ROOT_OPTS="nodev"
BOOT_OPTS="defaults,nodev,nosuid,noexec"
EFI_OPTS="defaults,nodev,nosuid,noexec"

###===================== SANITY & PACKAGES ===================================
echo ">>> This will WIPE ${DISK}. Type YES to proceed."
read -r CONFIRM; [ "${CONFIRM:-}" = "YES" ] || { echo "Aborting."; exit 1; }

# Ensure base tools
for pkg in sgdisk cryptsetup lvm2 e2fsprogs dosfstools curl; do
  apk add --no-progress "$pkg" || true
done

# Detect boot mode (UEFI if efivars present)
if [ -d /sys/firmware/efi/efivars ]; then
  BOOT_MODE="uefi"
else
  BOOT_MODE="bios"
fi
echo ">>> Detected boot mode: ${BOOT_MODE}"

###===================== PARTITION (GPT either way) ===========================
echo ">>> Zapping and partitioning ${DISK}"
sgdisk --zap-all "${DISK}"
sgdisk -o "${DISK}"

if [ "${BOOT_MODE}" = "uefi" ]; then
  sgdisk -n 1:0:+"${EFI_SIZE}"  -t 1:ef00 -c 1:"EFI System" "${DISK}"
else
  # BIOS: still GPT; make a tiny BIOS boot partition for GRUB
  sgdisk -n 1:0:+1MiB -t 1:ef02 -c 1:"BIOS boot" "${DISK}"
fi

sgdisk -n 2:0:+"${BOOT_SIZE}" -t 2:8300 -c 2:"boot"       "${DISK}"
sgdisk -n 3:0:0               -t 3:8300 -c 3:"cryptlvm"   "${DISK}"
partprobe "${DISK}"
sleep 1

###===================== FORMAT UNENCRYPTED ==================================
if [ "${BOOT_MODE}" = "uefi" ]; then
  mkfs.vfat -F32 -n EFI "${P1}"
fi
mkfs."${FS_BOOT}" -L BOOT "${P2}"

###===================== LUKS + LVM ==========================================
echo ">>> Creating LUKS container on ${P3}"
cryptsetup luksFormat "${P3}"
cryptsetup open "${P3}" "${MAP}"

pvcreate "/dev/mapper/${MAP}"
vgcreate "${VG}" "/dev/mapper/${MAP}"

lvcreate -L "${LV_ROOT_SIZE}"    -n root     "${VG}"
lvcreate -L "${LV_HOME_SIZE}"    -n home     "${VG}"
lvcreate -L "${LV_VAR_SIZE}"     -n var      "${VG}"
lvcreate -L "${LV_TMP_SIZE}"     -n tmp      "${VG}"
lvcreate -L "${LV_VAR_TMP_SIZE}" -n var_tmp  "${VG}"
if [ -n "${LV_SWAP_SIZE}" ]; then
  lvcreate -L "${LV_SWAP_SIZE}"  -n swap     "${VG}"
fi

mkfs."${FS_DATA}" -L ROOT    "/dev/${VG}/root"
mkfs."${FS_DATA}" -L HOME    "/dev/${VG}/home"
mkfs."${FS_DATA}" -L VAR     "/dev/${VG}/var"
mkfs."${FS_DATA}" -L TMP     "/dev/${VG}/tmp"
mkfs."${FS_DATA}" -L VARTMP  "/dev/${VG}/var_tmp"
if [ -n "${LV_SWAP_SIZE}" ]; then
  mkswap -L SWAP "/dev/${VG}/swap"
fi

###===================== MOUNT TARGET =========================================
mount "/dev/${VG}/root" "${MNT}"
mkdir -p "${MNT}/boot" "${MNT}/home" "${MNT}/var" "${MNT}/tmp" "${MNT}/var/tmp"
mount "${P2}" "${MNT}/boot"
if [ "${BOOT_MODE}" = "uefi" ]; then
  mkdir -p "${MNT}/boot/efi"
  mount "${P1}" "${MNT}/boot/efi"
fi
mount "/dev/${VG}/home"    "${MNT}/home"
mount "/dev/${VG}/var"     "${MNT}/var"
mount "/dev/${VG}/tmp"     "${MNT}/tmp"
mount "/dev/${VG}/var_tmp" "${MNT}/var/tmp"
if [ -n "${LV_SWAP_SIZE}" ]; then
  swapon "/dev/${VG}/swap" || true
fi

###===================== PRE-SEED BASIC CONFIGS ===============================
mkdir -p "${MNT}/etc"

# Repos
mkdir -p "${MNT}/etc/apk"
cat > "${MNT}/etc/apk/repositories" <<EOF
${APK_REPO}
${APK_REPO_COMMUNITY}
EOF

# LUKS auto-open at boot
cat > "${MNT}/etc/luks-open.conf" <<EOF
luks_main ${P3}
EOF

# fstab with hardened options
cat > "${MNT}/etc/fstab" <<EOF
# <fs>                         <mount>     <type>  <opts>                     <dump> <pass>
/dev/mapper/${VG}-root         /           ${FS_DATA}  ${ROOT_OPTS}           0 1
${P2}                          /boot       ${FS_BOOT}  ${BOOT_OPTS}           0 2
$( [ "${BOOT_MODE}" = "uefi" ] && echo "${P1}                          /boot/efi   vfat    ${EFI_OPTS}                0 2" )
/dev/mapper/${VG}-home         /home       ${FS_DATA}  ${HOME_OPTS}           0 2
/dev/mapper/${VG}-var          /var        ${FS_DATA}  ${VAR_OPTS}            0 2
/dev/mapper/${VG}-tmp          /tmp        ${FS_DATA}  ${TMP_OPTS}            0 2
/dev/mapper/${VG}-var_tmp      /var/tmp    ${FS_DATA}  ${VAR_TMP_OPTS}        0 2
$( [ -n "${LV_SWAP_SIZE}" ] && echo "/dev/mapper/${VG}-swap          none        swap    defaults                 0 0" )
EOF

# Host + timezone + keymap
echo "${HOSTNAME}" > "${MNT}/etc/hostname"
echo "${TIMEZONE}" > "${MNT}/etc/timezone"
mkdir -p "${MNT}/etc/conf.d"
cat > "${MNT}/etc/conf.d/keymaps" <<EOF
keymap="${KEYMAP}"
EOF

# Basic network (ifupdown-ng)
mkdir -p "${MNT}/etc/network"
if [ "${USE_DHCP}" = "yes" ]; then
  cat > "${MNT}/etc/network/interfaces" <<EOF
auto lo
iface lo inet loopback

auto ${NET_IFACE}
iface ${NET_IFACE} inet dhcp
EOF
else
  cat > "${MNT}/etc/network/interfaces" <<EOF
auto lo
iface lo inet loopback

auto ${NET_IFACE}
iface ${NET_IFACE} inet static
    address ${STATIC_IP}
    gateway ${STATIC_GW}
    dns ${STATIC_DNS}
EOF
fi

###===================== INSTALL BASE SYSTEM ==================================
# setup-disk honors existing mounts at /mnt and installs Alpine base there.
apk add --no-progress alpine-conf
setup-disk -m sys "${MNT}"

###===================== CHROOT CONFIG ========================================
mount -t proc none "${MNT}/proc"
mount -t sysfs none "${MNT}/sys"
mount -o bind /dev "${MNT}/dev"
mount -o bind /run "${MNT}/run"

cat > "${MNT}/root/post-chroot.sh" <<'EOS'
set -euo pipefail

# Repos already written, ensure index
apk update

# Core packages
apk add cryptsetup lvm2 mkinitfs e2fsprogs openrc busybox-initscripts
apk add grub grub-efi efibootmgr || true    # on BIOS, grub-efi/efibootmgr ignored
apk add openssh doas sudo tzdata curl || true

# Timezone
setup-timezone -z "$(cat /etc/timezone 2>/dev/null || echo UTC)" || true

# Initramfs with cryptsetup+lvm
if grep -q '^features=' /etc/mkinitfs/mkinitfs.conf 2>/dev/null; then
  sed -i 's/^features=.*/features="base cryptsetup lvm"/' /etc/mkinitfs/mkinitfs.conf
else
  echo 'features="base cryptsetup lvm"' > /etc/mkinitfs/mkinitfs.conf
fi
mkinitfs

# Root password
if [ -f /root/.rootpw ]; then
  echo "root:$(cat /root/.rootpw)" | chpasswd
  rm -f /root/.rootpw
fi

# sudo/doas
if command -v doas >/dev/null 2>&1; then
  echo 'permit persist :wheel' > /etc/doas.d/wheel.conf
else
  sed -i 's/^# \(%wheel ALL=(ALL:ALL) ALL\)/\1/' /etc/sudoers
fi

# SSH
if rc-update -v 2>/dev/null | grep -q sshd; then :; fi
rc-update add sshd default || true
rc-update add networking boot || true
rc-update add crond default || true

# SSH config hardening
if [ -f /etc/ssh/sshd_config ]; then
  sed -i 's/^#\?PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config
  sed -i 's/^#\?PermitRootLogin.*/PermitRootLogin prohibit-password/' /etc/ssh/sshd_config
fi
if [ -f /root/.authkey ]; then
  mkdir -p /root/.ssh
  chmod 700 /root/.ssh
  cat /root/.authkey >> /root/.ssh/authorized_keys
  chmod 600 /root/.ssh/authorized_keys
  sed -i 's/^PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config
fi
if [ -f /home/.userauth ]; then
  u="$(cut -d: -f1 /home/.userauth)"
  mkdir -p "/home/${u}/.ssh"
  chmod 700 "/home/${u}/.ssh"
  sed -e "s/^${u}://" /home/.userauth >> "/home/${u}/.ssh/authorized_keys"
  chmod 600 "/home/${u}/.ssh/authorized_keys"
  chown -R "${u}:${u}" "/home/${u}/.ssh"
  rm -f /home/.userauth
fi

# Bootloader (UEFI vs BIOS)
if [ -d /sys/firmware/efi/efivars ]; then
  grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=alpine
else
  grub-install --target=i386-pc "$(lsblk -ndo pkname /dev/mapper/$(ls /dev/mapper | grep -m1 -E 'vg0-root|luks_main' ) | head -n1 | sed 's/[0-9]*$//')"
fi
grub-mkconfig -o /boot/grub/grub.cfg

# Final touches
rc-update add hwclock boot || true
rc-update add killprocs shutdown || true
rc-update add savecache shutdown || true

echo "Post-chroot config complete."
EOS
chmod +x "${MNT}/root/post-chroot.sh"

# Pass secrets to chroot script
printf "%s" "${ROOT_PASSWORD}" > "${MNT}/root/.rootpw"
if [ -n "${NEW_USER}" ]; then
  printf "%s:%s" "${NEW_USER}" "${NEW_USER_PASSWORD}" > "${MNT}/root/.newuser"
fi
if [ -n "${AUTHORIZED_KEY}" ]; then
  printf "%s\n" "${AUTHORIZED_KEY}" > "${MNT}/root/.authkey"
  if [ -n "${NEW_USER}" ]; then
    printf "%s:%s\n" "${NEW_USER}" "${AUTHORIZED_KEY}" > "${MNT}/home/.userauth"
  fi
fi

chroot "${MNT}" /bin/sh -c "/root/post-chroot.sh"
rm -f "${MNT}/root/post-chroot.sh"

###===================== HARDENING NUDGES =====================================
# Adjust sshd root login preference
if [ "${ENABLE_SSH}" != "yes" ]; then
  chroot "${MNT}" rc-update del sshd default || true
fi
if [ "${PERMIT_ROOT_SSH}" = "yes" ] && [ -f "${MNT}/etc/ssh/sshd_config" ]; then
  sed -i 's/^PermitRootLogin.*/PermitRootLogin yes/' "${MNT}/etc/ssh/sshd_config"
fi

###===================== CLEANUP & SUMMARY ====================================
umount -R "${MNT}/proc" || true
umount -R "${MNT}/sys" || true
umount -R "${MNT}/dev" || true
umount -R "${MNT}/run" || true

echo
echo "============================================================================"
echo "All done. Installed Alpine with:"
echo "- ${BOOT_MODE^^} boot, /boot$( [ "${BOOT_MODE}" = "uefi" ] && echo " + /boot/efi") unencrypted"
echo "- LUKS -> LVM: /, /home, /var, /tmp, /var/tmp $( [ -n "${LV_SWAP_SIZE}" ] && echo "+ swap")"
echo "- Hardened mount options on tmp and var/tmp"
echo "- Hostname: ${HOSTNAME}, TZ: ${TIMEZONE}, Keymap: ${KEYMAP}"
echo "- User: ${NEW_USER:-<none>}   SSH: ${ENABLE_SSH}   Root SSH: ${PERMIT_ROOT_SSH}"
echo "Now: reboot, enter LUKS passphrase, and log in."
echo "============================================================================"
